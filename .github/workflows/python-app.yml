# Multi-platform build workflow for CampusFly
# Builds binaries for Windows x86_64, macOS ARM64/x86_64, Linux ARMv7/ARMv8a/x86_64

name: Multi-Platform Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [published]

permissions:
  contents: read

jobs:
  # Test and lint job
  test:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        # FIXED: Specified an exact patch version to bypass version resolution issues.
        python-version: "3.11.8"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f stupid-campus-run/requirements.txt ]; then pip install -r stupid-campus-run/requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 stupid-campus-run/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 stupid-campus-run/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        cd stupid-campus-run
        pytest --tb=short || echo "No tests found, continuing..."

  # Native builds (x86_64 + macOS ARM64)
  build-native:
    needs: test
    # ADDED: continue-on-error: true ensures this job doesn't fail the workflow even if some builds fail
    continue-on-error: true
    strategy:
      # ADDED: fail-fast: false ensures all jobs in the matrix run, even if one fails.
      fail-fast: false
      matrix:
        include:
          # Windows x86_64
          - os: windows-latest
            arch: x86_64
            target: windows-x86_64
            binary_name: CampusFly-windows-x86_64.exe
            
          # macOS builds
          - os: macos-latest
            arch: x86_64
            target: macos-x86_64
            binary_name: CampusFly-macos-x86_64
          - os: macos-latest
            arch: arm64
            target: macos-arm64
            binary_name: CampusFly-macos-arm64
            
          # Linux x86_64
          - os: ubuntu-22.04
            arch: x86_64
            target: linux-x86_64
            binary_name: CampusFly-linux-x86_64
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        # FIXED: Specified an exact patch version to bypass version resolution issues.
        python-version: "3.11.8"
        architecture: ${{ matrix.arch }}

    # ADDED: Install system dependencies for PyInstaller on Linux runners
    - name: Install Linux build dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y patchelf build-essential
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r stupid-campus-run/requirements.txt
        pip install pyinstaller
    
    - name: Build for ${{ matrix.target }}
      # ADDED: continue-on-error: true allows the workflow to continue even if build fails
      continue-on-error: true
      run: |
        cd stupid-campus-run
        pyinstaller --onefile --console --name "${{ matrix.binary_name }}" tui.py
      shell: bash
    
    - name: Upload ${{ matrix.target }} artifact
      # ADDED: if: success() ensures we only upload if the build succeeded
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.target }}
        path: stupid-campus-run/dist/${{ matrix.binary_name }}
        retention-days: 30

  # Cross-compile Linux ARM architectures from x86_64
  cross-compile-linux-arm:
    needs: test
    # ADDED: continue-on-error: true ensures this job doesn't fail the workflow even if some builds fail
    continue-on-error: true
    runs-on: ubuntu-22.04
    
    strategy:
      # ADDED: fail-fast: false ensures all jobs in the matrix run, even if one fails.
      fail-fast: false
      matrix:
        include:
          - target: linux-arm64
            binary_name: CampusFly-linux-arm64
            arch: arm64
          - target: linux-armv7
            binary_name: CampusFly-linux-armv7
            arch: armv7
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        # FIXED: Specified an exact patch version to bypass version resolution issues.
        python-version: "3.11.8"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r stupid-campus-run/requirements.txt
        pip install pyinstaller
    
    - name: Install cross-compilation tools
      run: |
        sudo apt-get update
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
        elif [ "${{ matrix.arch }}" = "armv7" ]; then
          sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
        fi
    
    - name: Cross-compile for ${{ matrix.target }}
      # ADDED: continue-on-error: true allows the workflow to continue even if build fails
      continue-on-error: true
      run: |
        cd stupid-campus-run
        
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          # Cross-compile for Linux ARM64
          export CC=aarch64-linux-gnu-gcc
          export CXX=aarch64-linux-gnu-g++
        elif [ "${{ matrix.arch }}" = "armv7" ]; then
          # Cross-compile for Linux ARMv7
          export CC=arm-linux-gnueabihf-gcc
          export CXX=arm-linux-gnueabihf-g++
        fi
        
        # Build with PyInstaller
        pyinstaller --onefile --console --name "${{ matrix.binary_name }}" tui.py
    
    - name: Upload ${{ matrix.target }} artifact
      # ADDED: if: success() ensures we only upload if the build succeeded
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.target }}
        path: stupid-campus-run/dist/${{ matrix.binary_name }}
        retention-days: 30

  # Create release assets
  release:
    # MODIFIED: Run even if previous jobs fail, but only on release events
    if: github.event_name == 'release' && always()
    needs: [build-native, cross-compile-linux-arm]
    runs-on: ubuntu-22.04
    # ADDED: Permissions required to upload assets to a GitHub Release.
    permissions:
      contents: write
    
    steps:
    - name: Download all artifacts
      # ADDED: Continue on error if some artifacts are missing
      continue-on-error: true
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
    
    - name: Prepare release files
      run: |
        mkdir -p release
        # The download-artifact action creates a directory for each artifact.
        # We need to find the files inside those directories.
        # This will only copy files that exist, ignoring missing ones
        find artifacts -type f -name "CampusFly-*" -exec cp {} release/ \; 2>/dev/null || true
        
        # List what we successfully built
        echo "Successfully built artifacts:"
        ls -lh release/ || echo "No artifacts were successfully built"
    
    - name: Upload Release Assets
      # ADDED: Only upload if we have at least one successful build
      if: hashFiles('release/*') != ''
      uses: softprops/action-gh-release@v2
      with:
        # This will upload all files from the release directory as individual assets
        files: release/*
        # ADDED: Fail softly if upload fails
        fail_on_unmatched_files: false

